powr=c(powr[upper.tri(powr)])
)
powlong <- powlong[order(-powlong$powr), ]#sorting the data frame so highest power comes first
sumpow <- sum(powlong$powr)#total power
powlong$thresh <- cumsum(powlong$powr)/sumpow
# subset the power scores that account for threshold of the flow with a minimum of minlink and a maximum of maxlink of the highest powers
upto <- 1+nrow(subset(powlong, powlong$thresh <= threshold))
if ( upto < minlink){
powlong <- powlong[1:minlink,]
} else {if (upto > maxlink) {
powlong <- powlong[1:maxlink,]
} else{
powlong<-powlong[1:upto,]
}}
powlong$label <- paste(powlong$a, powlong$b, sep = '_')
powlong$perc<-powlong$powr/sumpow*100 #percentage of total
powlong$cumsum<-cumsum(powlong$powr) #power cumulative sum
powlong$cumsum_perc<-powlong$thresh*100#power cumulative sum percentage
#create dataframes of power scores and location of ends of the bottleneck
powpoints <- cbind(apt[powlong$a, c('xm', 'ym')], powlong[,c('label','powr','perc', 'cumsum_perc')], type = 'a')
#powpoints is to convert to line geometries, 2 rows per bottleneck
#power is one row per bottleneck - to continue analysis in R
power<- powpoints[,c('xm', 'ym','label','powr','perc','cumsum_perc')]
names(power)<-c('xma', 'yma','label','powr','perc','cumsum_perc')
power<- cbind(power,apt[powlong$b, c('xm', 'ym')])
names(power)<-c('xma', 'yma','label','powr','perc','cumsum_perc','xmb','ymb')
powpoints <- rbind(powpoints, cbind(apt[powlong$b, c('xm', 'ym')], powlong[, c('label','powr','perc','cumsum_perc')], type = 'b'))
names(powpoints) <- c('xm', 'ym', 'label', 'power','perc','cumsum_perc','type')
#clean up to save memory - if sure no longer needed
rm(Cfree)
rm(powr)
gc()
#### create shapefile of the location of the top bottlenecks ####
powpoints<- powpoints[order(powpoints$label),]
lineobj<- sf_linestring(
obj = powpoints,
x = 'xm',
y = 'ym',
z = NULL,
m = NULL,
linestring_id = 'label',
keep = TRUE)
lineobj<-subset(lineobj, select = -c(type))
lineobj$length<-st_length(lineobj)# calculate bottleneck length (units defined by coordinate reference system, here meters)
#assign spatial reference to bottlenecks
st_crs(lineobj)<-crs(amap)
speed_power<- as.data.frame(cbind(cond, sumpow))
names(speed_power)<-c('Speed', 'Total power')
write.csv(speed_power, paste0(dsn,filename,'speed_power2.csv'))
write.csv(f, paste0(dsn,filename,'flow2.csv'))
write.csv(power, paste0(dsn,filename,'power2.csv'))
writeRaster(r_f,paste0(dsn,filename,'flow_raster2.tif'),overwrite=TRUE)
writeRaster(r_p,paste0(dsn,filename,'progress_raster2.tif'),overwrite=TRUE)
st_write(lineobj, paste0(dsn,filename,'bottlenecks2.shp'), append = FALSE)
results <- list(cond, sumpow,f, r_f, f_shp, r_p, power, lineobj)
names(results) <- c('conductance', 'powersum','flow', 'flow_raster', 'flow_shp', 'progress_raster', 'power', 'bottlenecks')
return(results)
}
filenameNESW<-'Nat_1k_heathland_3k_NESW_'
stNESW<- raster("spatial_data/derived/st_nat_NE_SW.tif")
Nat_heathland_ConNESW<- Condatis_bottlenecks(hab=hab, st=stNESW,R=R,disp=disp, filename =filenameNESW, dsn=dsn)
Condatis_bottlenecks<- function(hab, st, R, disp,filename,dsn, threshold=0.9, maxlink=10000, minlink=10, maxdisp=Inf){
library(raster)
library(sf)
library(rgdal)
library(dplyr)
library(maptools)
library(sfheaders)
smart.round <- function(x) { #this function rounds numeric to integer while preserving their sum
y <- floor(x)
indices <- tail(order(x-y), round(sum(x)) - sum(y))
y[indices] <- y[indices] + 1
y
}
# Oporator that  is the oposite of %in%
`%!in%` = Negate(`%in%`)
# Check if the habitat is in meters, and if it is make sure the cellside etc is divided by 1000
if (grepl('units=m', hab@crs@projargs)){
scaler <- 1000
} else {
scaler <- 1
}
amap <- hab
# Take the habitat raster, convert to a dataframe
apt <- as.data.frame(rasterToPoints(amap, fun = function(x){!is.na(x)}, spatial = F))
names(apt) <- c('xm', 'ym', 'cover')
apt <- apt[apt$cover>0,]
apt$x <- apt$xm/scaler # Create new columns for coordinates in km #
apt$y <- apt$ym/scaler
cellside <- xres(amap)/scaler
#convert st raster to dataframe#
st <- as.data.frame(rasterToPoints(st,fun = function(x){!is.na(x)}, spatial = F))
names(st) <- c('xm', 'ym', 'label')
st$x <- st$xm/scaler
st$y <- st$ym/scaler
#Get the distances between each cell of habitat and every other cell
len<-dim(apt)[1]
dm <- dist(apt[, c('x','y')])
if(maxdisp!=Inf){
dm[dm<=maxdisp]<-0
}
#Get x and y coordinates for sources and targets
origin <- st[st$label == 1, c('x','y')]
target <- st[st$label == 2, c('x','y')]
# Define alpha (mean dispersal) and normalisation so the area under the dispersal kernel integrates to 1
alpha <- 2/disp
norm <- R*alpha^2/2/pi*cellside^4
#### Core Condatis Calculations ####
#Current between cells
Cfree <- norm*outer(apt$cover, apt$cover, '*')*exp(-alpha*as.matrix(dm))
diag(Cfree) <- 0
#Current into a cell and out of a cell
Cin <- norm*apt$cover*
rowSums(exp(-alpha*sqrt(outer(apt[, 'x'], origin[, 'x'], '-')^2 +
outer(apt[, 'y'], origin[, 'y'], '-')^2)))
Cout <- norm*apt$cover*
rowSums(exp(-alpha*sqrt(outer(apt[, 'x'], target[, 'x'], '-')^2 +
outer(apt[, 'y'], target[, 'y'], '-')^2)))
M0 <- diag(Cin + Cout + rowSums(Cfree)) - Cfree
w <- Cin - Cout
v0 <- solve(M0, w, tol = exp(-255)) # This produces the resistance values in the network and is where errors will most likely occur, see 'try' function for error handling
I0 <- (v0 + 1) * Cout
I1 <- (1 - v0) * Cin
#Conductance value of whole network
cond <- (sum(I0) + sum(I1))/4 #4 to make overall voltage difference 1 rather than 2
### flow by cell ###
flo <- apply(Cfree * outer(v0, v0, '-'), 1, function(x) {
sum(abs(x))
})
flo <- ((flo)/2 + I0 + I1)/2
# combine progress, flow, standardised flow, and conductance into a data.frame for saving later
f <- cbind(apt, progress = (v0 + 1)/2, flow = flo, std_flow = flo/max(flo), conductance = cond)
# Create shapefile of standardised flow values (can be skipped if not needed)
f_shp <- SpatialPointsDataFrame(f[, c('xm', 'ym')], f[, 4:ncol(f)],
proj4string = crs(amap)) %>%
as('sf') %>%
st_buffer(dist = (xres(amap)/2), endCapStyle = 'SQUARE')
# Create a raster of standardised flow and the 'progress' statistic (can be skipped if not needed)
r <- raster(extent(amap), res = xres(amap), crs = crs(amap))
r_f <- rasterize(f_shp, r, field = 'flow')
r_p <- rasterize(f_shp, r, field = 'progress')
## Power calculations - for bottlenecks ##
powr <- Cfree * (outer(v0, v0, '-')/2)^2 #divide by 2 to get same units again
powlong <- data.frame(
a = c(matrix(1:len, nrow = len, ncol = len)[upper.tri(powr)]),
b = c(matrix(1:len, nrow = len, ncol = len, byrow = T)[upper.tri(powr)]),
powr=c(powr[upper.tri(powr)])
)
powlong <- powlong[order(-powlong$powr), ]#sorting the data frame so highest power comes first
sumpow <- sum(powlong$powr)#total power
powlong$thresh <- cumsum(powlong$powr)/sumpow
# subset the power scores that account for threshold of the flow with a minimum of minlink and a maximum of maxlink of the highest powers
upto <- 1+nrow(subset(powlong, powlong$thresh <= threshold))
if ( upto < minlink){
powlong <- powlong[1:minlink,]
} else {if (upto > maxlink) {
powlong <- powlong[1:maxlink,]
} else{
powlong<-powlong[1:upto,]
}}
powlong$label <- paste(powlong$a, powlong$b, sep = '_')
powlong$perc<-powlong$powr/sumpow*100 #percentage of total
powlong$cumsum<-cumsum(powlong$powr) #power cumulative sum
powlong$cumsum_perc<-powlong$thresh*100#power cumulative sum percentage
#create dataframes of power scores and location of ends of the bottleneck
powpoints <- cbind(apt[powlong$a, c('xm', 'ym')], powlong[,c('label','powr','perc', 'cumsum_perc')], type = 'a')
#powpoints is to convert to line geometries, 2 rows per bottleneck
#power is one row per bottleneck - to continue analysis in R
power<- powpoints[,c('xm', 'ym','label','powr','perc','cumsum_perc')]
names(power)<-c('xma', 'yma','label','powr','perc','cumsum_perc')
power<- cbind(power,apt[powlong$b, c('xm', 'ym')])
names(power)<-c('xma', 'yma','label','powr','perc','cumsum_perc','xmb','ymb')
powpoints <- rbind(powpoints, cbind(apt[powlong$b, c('xm', 'ym')], powlong[, c('label','powr','perc','cumsum_perc')], type = 'b'))
names(powpoints) <- c('xm', 'ym', 'label', 'power','perc','cumsum_perc','type')
#clean up to save memory - if sure no longer needed
rm(Cfree)
rm(powr)
gc()
#### create shapefile of the location of the top bottlenecks ####
powpoints<- powpoints[order(powpoints$label),]
lineobj<- sf_linestring(
obj = powpoints,
x = 'xm',
y = 'ym',
z = NULL,
m = NULL,
linestring_id = 'label',
keep = TRUE)
lineobj<-subset(lineobj, select = -c(type))
lineobj$length<-st_length(lineobj)# calculate bottleneck length (units defined by coordinate reference system, here meters)
#assign spatial reference to bottlenecks
st_crs(lineobj)<-crs(amap)
speed_power<- as.data.frame(cbind(cond, sumpow))
names(speed_power)<-c('Speed', 'Total power')
write.csv(speed_power, paste0(dsn,filename,'speed_power2.csv'))
write.csv(f, paste0(dsn,filename,'flow2.csv'))
write.csv(power, paste0(dsn,filename,'power2.csv'))
writeRaster(r_f,paste0(dsn,filename,'flow_raster2.tif'),overwrite=TRUE)
writeRaster(r_p,paste0(dsn,filename,'progress_raster2.tif'),overwrite=TRUE)
st_write(lineobj, paste0(dsn,filename,'bottlenecks2.shp'), append = FALSE)
results <- list(cond, sumpow,f, r_f, f_shp, r_p, power, lineobj)
names(results) <- c('conductance', 'powersum','flow', 'flow_raster', 'flow_shp', 'progress_raster', 'power', 'bottlenecks')
return(results)
}
hab<-raster("spatial_data/derived/Nat_1km_heathland.tif")
R<- 1000
disp<- 3.4
dsn<-'spatial_data/derived/' #path to output files location
filenameNESW<-'Nat_1k_heathland_3k_NESW_'
stNESW<- raster("spatial_data/derived/st_nat_NE_SW.tif")
Nat_heathland_ConNESW<- Condatis_bottlenecks(hab=hab, st=stNESW,R=R,disp=disp, filename =filenameNESW, dsn=dsn, maxdisp=500)
hab<-raster("spatial_data/derived/Nat_1km_wetland.tif")
R<- 1000
dsn<-'spatial_data/derived/' #path to output files location
hab@file@name
disp
filename<-'Nat_1k_wetland_3k_NESW_'
st<- raster("spatial_data/derived/st_nat_NE_SW.tif")
Nat_wetland_ConNESW<- Condatis_bottlenecks_outputs(hab=hab, st=stNESW,R=R,disp=disp, filename =filenameNESW, dsn=dsn, maxdisp=500)
Nat_wetland_ConNESW<- Condatis_bottlenecks(hab=hab, st=stNESW,R=R,disp=disp, filename =filenameNESW, dsn=dsn, maxdisp=500)
View(Condatis_bottlenecks)
hab<-raster("spatial_data/derived/Nat_1km_wetland.tif")
R<- 1000
disp<- 3.4
dsn<-'spatial_data/derived/'
View(hab)
hab@file@name
nat_border<- st_read('spatial_data/derived/original/Nat_border_BGN.shp')
nat_border<- st_read('spatial_data/derived/borders/Nat_border_BGN.shp')
st_are(nat_border)
nat_border<- st_read('spatial_data/derived/borders/Nat_border_BGN.shp')
st_area(nat_border)
nat_border<- st_read('spatial_data/derived/borders/Nat_border_BGN.shp')
st_area(nat_border)
area_total<-st_area(nat_border)/1000000
area_total_km2<-st_area(nat_border)/1000000
hab<-raster("spatial_data/derived/Nat_1km_heathland.tif")
sum(hab)
sum(hab$Nat_1km_heathland)
View(hab)
cellStats(hab, 'sum')
freq(hab)
cellStats(hab, 'min')
freq(hab$Nat_1km_heathland@data@values)
freq(hab)
nat_heathland<- st_read('spatial_data/derived/PHI_Nat_heath.shp')
area_heath_km2<-st_area(nat_heathland)/1000000
area_heath_km2
nat_heathland<- st_read('spatial_data/derived/PHI_Nat_heath.shp')
area_heath_km2<-sum(st_area(nat_heathland)/1000000)
area_heath_km2
area_heath_km2<-sum(st_area(nat_heathland))
area_heath_km2
area_heath_km2<-sum(st_area(nat_heathland)/1000000)
area_heath_km2
area_total_km2
heath_nat_prop<-(area_heath_km2/area_total_km2)*100
heath_nat_prop
habitat_propotion<-function(total, habitat){
area_total_km2<-st_area(total)/1000000
area_heath_km2<-sum(st_area(habitat)/1000000)
habitat_prop<-(habitat/total)*100
return(habitat_prop)
}
total<- st_read('spatial_data/derived/borders/Nat_border_BGN.shp')
habitat<- st_read('spatial_data/derived/PHI_Nat_heath.shp')
habitat_propotion<-function(total, habitat){
area_total_km2<-st_area(total)/1000000
area_heath_km2<-sum(st_area(habitat)/1000000)
habitat_prop<-(habitat/total)*100
return(habitat_prop)
}
return(habitat_prop)
habitat_propotion<-function(total, habitat){
area_total_km2<-st_area(total)/1000000
area_heath_km2<-sum(st_area(habitat)/1000000)
habitat_prop<-(habitat/total)*100
return(habitat_prop)
}
heathland<-habitat_propotion(total, habitat)
habitat_propotion<-function(total, habitat){
library(raster)
library(sf)
area_total_km2<-st_area(total)/1000000
area_heath_km2<-sum(st_area(habitat)/1000000)
habitat_prop<-(habitat/total)*100
return(habitat_prop)
}
total<- st_read('spatial_data/derived/borders/Nat_border_BGN.shp')
habitat<- st_read('spatial_data/derived/PHI_Nat_heath.shp')
print(habitat_prop)
habitat_propotion<-function(total, habitat){
library(raster)
library(sf)
area_total_km2<-st_area(total)/1000000
area_heath_km2<-sum(st_area(habitat)/1000000)
habitat_prop<-(habitat/total)*100
print(habitat_prop)
return(habitat_prop)
}
total<- st_read('spatial_data/derived/borders/Nat_border_BGN.shp')
habitat<- st_read('spatial_data/derived/PHI_Nat_heath.shp')
heathland<-habitat_propotion(total, habitat)
total<- st_read('spatial_data/derived/borders/Nat_border_BGN.shp')
area_total_km2<-st_area(total)/1000000
area_heath_km2<-sum(st_area(habitat)/1000000)
habitat_prop<-(habitat/total)*100
habitat_propotion<-function(total, habitat){
library(raster)
library(sf)
area_total_km2<-st_area(total)/1000000
area_hab_km2<-sum(st_area(habitat)/1000000)
habitat_prop<-(area_hab_km2/area_total_km2)*100
print(habitat_prop)
return(habitat_prop)
}
library(raster)
library(sf)
total<- st_read('spatial_data/derived/borders/Nat_border_BGN.shp')
habitat<- st_read('spatial_data/derived/PHI_Nat_heath.shp')
heathland<-habitat_propotion(total, habitat)
habitat_propotion<-function(total, habitat){
library(raster)
library(sf)
area_total_km2<-st_area(total)/1000000
area_hab_km2<-sum(st_area(habitat)/1000000)
habitat_prop<-(area_hab_km2/area_total_km2)*100
print(habitat_prop,"[km^2]")
return(habitat_prop)
}
total<- st_read('spatial_data/derived/borders/Nat_border_BGN.shp')
habitat<- st_read('spatial_data/derived/PHI_Nat_heath.shp')
heathland<-habitat_propotion(total, habitat)
habitat_propotion<-function(total, habitat){
library(raster)
library(sf)
area_total_km2<-st_area(total)/1000000
area_hab_km2<-sum(st_area(habitat)/1000000)
habitat_prop<-(area_hab_km2/area_total_km2)*100
print(habitat_prop)
return(habitat_prop)
}
total<- st_read('spatial_data/derived/borders/Nat_border_BGN.shp')
habitat<- st_read('spatial_data/derived/PHI_Nat_heath.shp')
heathland<-habitat_propotion(total, habitat)
habitat<- st_read('spatial_data/derived/PHI_Nat_grass.shp')
grassland<-habitat_propotion(total, habitat)
habitat<- st_read('spatial_data/derived/PHI_Nat_grass.shp')
total<- st_read('spatial_data/derived/borders/Nat_border_BGN.shp')
grassland<-habitat_propotion(total, habitat)
habitat<- st_read('spatial_data/derived/PHI_Nat_wetl.shp')
wetland<-habitat_propotion(total, habitat)
habitat<-st_read('spatial_data/derived/PHI_Nat_heath.shp')
local<-st_read('spatial_data/original/SurreyHeathlands/Heathlands Connections with Buffer_1.shp')
habitat<-st_read('spatial_data/derived/PHI_Nat_heath.shp')
local<-st_read('spatial_data/original/SurreyHeathlands/Heathlands Connections with Buffer_1.shp')
habitat_loc<-function(habitat,local){
habitat_loc<- st_intersection(habitat, local)
}
habitat<-st_read('spatial_data/derived/PHI_Nat_heath.shp')
local<-st_read('spatial_data/original/SurreyHeathlands/Heathlands Connections with Buffer_1.shp')
habitat_loc<- st_intersection(habitat, local)
habitat<-st_read('spatial_data/derived/PHI_Nat_heath.shp')
local<-st_read('spatial_data/original/SurreyHeathlands/Heathlands Connections with Buffer_1.shp')
habitat_loc<- st_intersection(habitat, local)
heathland_loc<-habitat_propotion(total=local, habitat=habitat_loc)
habitat<-st_read('spatial_data/derived/PHI_Nat_grass.shp')
local<-st_read('spatial_data/original/SussexKent/NRP_LandOnly/NRP_LandOnly.shp')
habitat_loc<- st_intersection(habitat, local)
grassland_loc<-habitat_propotion(total=local, habitat=habitat_loc)
plot(grassland_loc)
plot(habitat_loc)
#Lost wetlands
habitat<-st_read('spatial_data/derived/PHI_Nat_wetl.shp')
local<-st_read('spatial_data/original/Lost_Wetlands_Boundary/Lost_Wetlands_Boundary.shp')
wetland_loc<-habitat_propotion(total=local, habitat=habitat_loc)
View(Condatis_bottlenecks)
View(Condatis_bottlenecks)
View(Condatis_bottlenecks)
View(Condatis_bottlenecks)
library(raster)
library(sf)
library(rgdal)
library(dplyr)
library(maptools)
#Condatis inputs (hab, R, disp, st)
hab<-raster("spatial_data/derived/Nat_1km_heathland.tif")
R<- 1000
disp<- 3.4
dsn<-'spatial_data/derived/' #path to output files location
filenameNESW<-'Nat_1k_heathland_3k_NESW_'
stNESWst<- raster("spatial_data/derived/st_nat_NE_SW.tif")
Nat_wetland_ConNESW<- Condatis_bottlenecks(hab=hab, st=stNESW,R=R,disp=disp, filename =filenameNESW, dsn=dsn, maxdisp=500)
#--------
hab<-raster("spatial_data/derived/Nat_1km_wetland.tif")
R<- 1000
disp<- 3.4
dsn<-'spatial_data/derived/' #path to output files location
filenameNESW<-'Nat_1k_wetland_3k_NESW_'
stNESWst<- raster("spatial_data/derived/st_nat_NE_SW.tif")
Nat_wetland_ConNESW<- Condatis_bottlenecks(hab=hab, st=stNESW,R=R,disp=disp, filename =filenameNESW, dsn=dsn, maxdisp=500)
View(Condatis_bottlenecks)
library(raster)
library(sf)
library(rgdal)
library(dplyr)
library(maptools)
#Condatis inputs (hab, R, disp, st)
hab<-raster("spatial_data/derived/Nat_1km_heathland.tif")
R<- 1000
disp<- 3.4
dsn<-'spatial_data/derived/' #path to output files location
filenameNESW<-'Nat_1k_heathland_3k_NESW_'
stNESWst<- raster("spatial_data/derived/st_nat_NE_SW.tif")
Nat_wetland_ConNESW<- Condatis_bottlenecks(hab=hab, st=stNESW,R=R,disp=disp, filename =filenameNESW, dsn=dsn, maxdisp=500, threshold=0.99, maxlink=10000, minlink=1000)
#--------
hab<-raster("spatial_data/derived/Nat_1km_wetland.tif")
R<- 1000
disp<- 3.4
dsn<-'spatial_data/derived/' #path to output files location
filenameNESW<-'Nat_1k_wetland_3k_NESW_'
stNESWst<- raster("spatial_data/derived/st_nat_NE_SW.tif")
Nat_wetland_ConNESW<- Condatis_bottlenecks(hab=hab, st=stNESW,R=R,disp=disp, filename =filenameNESW, dsn=dsn, maxdisp=500, threshold=0.99, maxlink=10000, minlink=1000)
hab<-raster("spatial_data/derived/Nat_1km_heathland.tif")
R<- 1000
disp<- 3.4
dsn<-'spatial_data/derived/' #path to output files location
filename<-'Nat_1k_heathland_3k_NESW_'
st<- raster("spatial_data/derived/st_nat_NE_SW.tif")
library(raster)
library(sf)
library(rgdal)
library(dplyr)
library(maptools)
hab<-raster("spatial_data/derived/Nat_1km_heathland.tif")
R<- 1000
disp<- 3.4
dsn<-'spatial_data/derived/' #path to output files location
filename<-'Nat_1k_heathland_3k_NESW_'
st<- raster("spatial_data/derived/st_nat_NE_SW.tif")
threshold=0.9
maxlink=10000
minlink=10
maxdisp=500
library(raster)
library(sf)
library(rgdal)
library(dplyr)
library(maptools)
library(sfheaders)
smart.round <- function(x) { #this function rounds numeric to integer while preserving their sum
y <- floor(x)
indices <- tail(order(x-y), round(sum(x)) - sum(y))
y[indices] <- y[indices] + 1
y
}
# Oporator that  is the oposite of %in%
`%!in%` = Negate(`%in%`)
# Check if the habitat is in meters, and if it is make sure the cellside etc is divided by 1000
if (grepl('units=m', hab@crs@projargs)){
scaler <- 1000
} else {
scaler <- 1
}
amap <- hab
# Take the habitat raster, convert to a dataframe
apt <- as.data.frame(rasterToPoints(amap, fun = function(x){!is.na(x)}, spatial = F))
threshold=0.99
library(raster)
library(sf)
library(rgdal)
library(dplyr)
library(maptools)
library(sfheaders)
smart.round <- function(x) { #this function rounds numeric to integer while preserving their sum
y <- floor(x)
indices <- tail(order(x-y), round(sum(x)) - sum(y))
y[indices] <- y[indices] + 1
y
}
# Oporator that  is the oposite of %in%
`%!in%` = Negate(`%in%`)
# Check if the habitat is in meters, and if it is make sure the cellside etc is divided by 1000
if (grepl('units=m', hab@crs@projargs)){
scaler <- 1000
} else {
scaler <- 1
}
amap <- hab
# Take the habitat raster, convert to a dataframe
apt <- as.data.frame(rasterToPoints(amap, fun = function(x){!is.na(x)}, spatial = F))
names(apt) <- c('xm', 'ym', 'cover')
apt <- apt[apt$cover>0,]
apt$x <- apt$xm/scaler # Create new columns for coordinates in km #
apt$y <- apt$ym/scaler
cellside <- xres(amap)/scaler
#convert st raster to dataframe#
st <- as.data.frame(rasterToPoints(st,fun = function(x){!is.na(x)}, spatial = F))
names(st) <- c('xm', 'ym', 'label')
st$x <- st$xm/scaler
st$y <- st$ym/scaler
len<-dim(apt)[1]
dm <- dist(apt[, c('x','y')])
#Get x and y coordinates for sources and targets
origin <- st[st$label == 1, c('x','y')]
target <- st[st$label == 2, c('x','y')]
# Define alpha (mean dispersal) and normalisation so the area under the dispersal kernel integrates to 1
alpha <- 2/disp
norm <- R*alpha^2/2/pi*cellside^4
View(hab)
hab@file@name
hist(dm)
